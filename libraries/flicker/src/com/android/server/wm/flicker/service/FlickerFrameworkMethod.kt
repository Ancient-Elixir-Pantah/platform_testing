/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.server.wm.flicker.service

import java.lang.reflect.Method
import org.junit.runners.model.FrameworkMethod

class FlickerFrameworkMethod(
    method: Method?,
    private val target: FlickerTestCase,
    private val name: String
) : FrameworkMethod(method) {
    /**
     * Returns the result of invoking this method on target with parameters params.
     * Executes the test method on the supplied target (returned by the JUnitTestFactory)
     * and not the instance generated by FrameworkMethod.
     */
    override fun invokeExplosively(target: Any?, vararg params: Any?): Any? {
        return super.invokeExplosively(this.target, params)
    }

    /**
     * Returns the method's name.
     */
    override fun getName(): String {
        return name
    }

    /**
     * We are reusing the same method with different parameters for each of our test results.
     * So we can't use the parent definition of this which check for method equality, otherwise
     * it would consider all FaaS test method as the same test which they are not.
     */
    override fun equals(other: Any?): Boolean {
        return other is FlickerFrameworkMethod && name == other.name
    }

    /**
     * @See equals
     */
    override fun hashCode(): Int {
        return name.hashCode()
    }
}
